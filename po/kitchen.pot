# Translations template for kitchen.
# Copyright (C) 2010 ORGANIZATION
# This file is distributed under the same license as the kitchen project.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2010.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: kitchen 0.1a3\n"
"Report-Msgid-Bugs-To: EMAIL@ADDRESS\n"
"POT-Creation-Date: 2010-06-04 04:14-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 0.9.5\n"

#: kitchen/release.py:9
msgid "Kitchen contains a cornucopia of useful code"
msgstr ""

#: kitchen/release.py:10
msgid ""
"\n"
"We've all done it.  In the process of writing a brand new application "
"we've\n"
"discovered that we need a little bit of code that we've invented before.\n"
"Perhaps it's something to handle unicode text.  Perhaps it's something to"
" make\n"
"a bit of python-2.5 code run on python-2.3.  Whatever it is, it ends up "
"being\n"
"a tiny bit of code that seems too small to worry about pushing into its "
"own\n"
"module so it sits there, a part of your current project, waiting to be "
"cut and\n"
"pasted into your next project.  And the next.  And the next.  And since "
"that\n"
"little bittybit of code proved so useful to you, it's highly likely that "
"it\n"
"proved useful to someone else as well.  Useful enough that they've "
"written it\n"
"and copy and pasted it over and over into each of their new projects.\n"
"\n"
"Well, no longer!  Kitchen aims to pull these small snippets of code into "
"a few\n"
"python modules which you can import and use within your project.  No more"
" copy\n"
"and paste!  Now you can let someone else maintain and release these small"
"\n"
"snippets so that you can get on with your life.\n"
msgstr ""

#: kitchen/pycompat25/defaultdict.py:54
msgid "First argument must be callable"
msgstr ""

#: kitchen/text/converters.py:473
#, python-format
msgid ""
"to_unicode was given \"%(obj)s\" which is neither a byte string (str) or "
"a unicode string"
msgstr ""

#: kitchen/text/converters.py:476 kitchen/text/converters.py:561
#, python-format
msgid "non_string value, %(param)s, is not set to a valid action"
msgstr ""

#: kitchen/text/converters.py:558
#, python-format
msgid ""
"to_bytes was given \"%(obj)s\" which is neither a unicode string or a "
"byte string (str)"
msgstr ""

#: kitchen/text/converters.py:569
msgid ""
"kitchen.text.converters.to_utf8 is deprecated.  Use "
"kitchen.text.converters.to_bytes(obj, encoding=\"utf8\", "
"non_string=\"passthru\" instead."
msgstr ""

#: kitchen/text/converters.py:592
msgid ""
"to_str is deprecated.  Use to_unicode or to_bytes instead.  See the "
"to_str docstring for porting information."
msgstr ""

#: kitchen/text/converters.py:713
msgid ""
"unicode_to_xml must have a unicode type as the first argument.  Use "
"bytes_string_to_xml for byte strings."
msgstr ""

#: kitchen/text/converters.py:717
msgid ""
"The control_chars argument to unicode_to_xml must be one of ignore, "
"replace, or strict"
msgstr ""

#: kitchen/text/converters.py:808
msgid ""
"byte_string_to_xml can only take a byte string as its first argument.  "
"Use unicode_to_xml for unicode strings"
msgstr ""

#: kitchen/text/converters.py:928
msgid ""
"kitchen.text.converters.to_xml is deprecated.  Use "
"kitchen.text.converters.guess_encoding_to_xml instead."
msgstr ""

#: kitchen/text/utf8.py:584
msgid ""
"kitchen.text.utf8.utf8_width is deprecated.  Use "
"kitchen.text.utf8.textual_width instead"
msgstr ""

#: kitchen/text/utf8.py:590
msgid ""
"kitchen.text.utf8.utf8_width_chop is deprecated.  Use "
"kitchen.text.utf8.textual_width_chop instead"
msgstr ""

#: kitchen/text/utils.py:73
msgid "byte_string must be a byte string (str)"
msgstr ""

#: kitchen/text/utils.py:137
msgid "process_control_char must have a unicode type as the first argument."
msgstr ""

#: kitchen/text/utils.py:148
msgid "ASCII control code present in string input"
msgstr ""

#: kitchen/text/utils.py:151
msgid ""
"The strategy argument to process_control_chars must be one of ignore, "
"replace, or strict"
msgstr ""

#: kitchen/text/utils.py:203
msgid "html_entities_unescape must have a unicode type for its first argument"
msgstr ""

